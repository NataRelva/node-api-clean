generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                   String     @id @unique @default(uuid())
  name                 String
  email                String     @unique
  password             String
  cpfCnpj              String     @unique
  phone                String
  accessToken          String     @unique @default("")
  role                 String     @default("user")
  passwordResetToken   String?    @unique
  passwordResetExpires DateTime?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  Cart                 Cart[]
  Purchase             Purchase[]
}

model Log {
  id        String   @id @unique @default(uuid())
  stack     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String         @id @unique @default(uuid())
  name         String
  weight       Float
  obs          String
  price        Float
  provider     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CartItem     CartItem[]
  mainCategory MainCategory[] @relation("MainCategoryToProduct")
  subCategory  SubCategory[]  @relation("SubCategoryToProduct")
  category     Category[]     @relation("CategoryToProduct")
  package      Package[]      @relation("PackageToProduct")
  unit         Unit[]         @relation("ProductToUnit")

  @@map("rmoura_product")
}

model Unit {
  id        String    @id @unique @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[] @relation("ProductToUnit")

  @@map("rmoura_unit")
}

model Package {
  id        String    @id @unique @default(uuid())
  name      String    @unique
  product   Product[] @relation("PackageToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("rmoura_package")
}

model Category {
  id        String    @id @unique @default(uuid())
  name      String    @unique
  product   Product[] @relation("CategoryToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("rmoura_category")
}

model MainCategory {
  id        String    @id @unique @default(uuid())
  name      String    @unique
  product   Product[] @relation("MainCategoryToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SubCategory {
  id        String    @id @unique @default(uuid())
  name      String    @unique
  product   Product[] @relation("SubCategoryToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id        String     @id @unique @default(uuid())
  accountId String?
  total     Float      @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  account   Account?   @relation(fields: [accountId], references: [id])
  cartItem  CartItem[]
  purchase  Purchase[]
}

model CartItem {
  id        String   @id @unique @default(uuid())
  productId String?
  quantity  Int
  cartId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart?    @relation(fields: [cartId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
}

model Purchase {
  id              String   @id @unique @default(uuid())
  paymentMethod   String
  shippingAddress String
  shippingPrice   Float
  total           Float
  status          String   @default("pending")
  createDate      DateTime @default(now())
  updateDate      DateTime @updatedAt
  cartId          String?
  accountId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  account         Account? @relation(fields: [accountId], references: [id])
  cart            Cart?    @relation(fields: [cartId], references: [id])
}
