generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                   String     @id @unique @default(uuid())
  name                 String
  email                String     @unique
  password             String
  cpfCnpj              String     @unique
  phone                String
  accessToken          String     @unique @default("")
  role                 String     @default("user")
  passwordResetToken   String?    @unique
  passwordResetExpires DateTime?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  Cart                 Cart[]
  Purchase             Purchase[]
}

model Log {
  id        String   @id @unique @default(uuid())
  stack     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                   String                 @id @unique @default(uuid())
  name                 String
  weight               Float
  obs                  String
  price                Float
  provider             String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  CartItem             CartItem[]
  ProductToSubCategory ProductToSubCategory[]
  category             Category[]             @relation("CategoryToProduct")
  mainCategory         MainCategory[]         @relation("MainCategoryToProduct")
  package              Package[]              @relation("PackageToProduct")
  unit                 Unit[]                 @relation("ProductToUnit")

  @@map("rmoura_product")
}

model Unit {
  id        String    @id @unique @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[] @relation("ProductToUnit")

  @@map("rmoura_unit")
}

model Package {
  id        String    @id @unique @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[] @relation("PackageToProduct")

  @@map("rmoura_package")
}

model Category {
  id        String    @id @unique @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[] @relation("CategoryToProduct")

  @@map("rmoura_category")
}

model MainCategory {
  id      String    @id @unique @default(uuid())
  name    String    @unique
  product Product[] @relation("MainCategoryToProduct")
}

model SubCategory {
  id                   String                 @id @unique @default(uuid())
  name                 String                 @unique
  ProductToSubCategory ProductToSubCategory[]
}

model Cart {
  id    String @id @unique @default(uuid())
  total Float  @default(0)

  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?

  cartItem CartItem[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Purchase  Purchase[]
}

model CartItem {
  id       String @id @unique @default(uuid())
  quantity Int

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  cart   Cart?   @relation(fields: [cartId], references: [id])
  cartId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id              String   @id @unique @default(uuid())
  paymentMethod   String
  shippingAddress String
  shippingPrice   Float
  total           Float
  status          String   @default("pending")
  createDate      DateTime @default(now())
  updateDate      DateTime @updatedAt

  cart   Cart?   @relation(fields: [cartId], references: [id])
  cartId String?

  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// export interface PurchaseModel { 
//   id: string;
//   cart: CartModel;
//   account: AccountModel,
//   paymentMethod: string;
//   shippingAddress: string;
//   shippingPrice: number;
//   total: number;
//   status: 'pending' | 'approved' | 'canceled' | 'refunded' | 'shipped' | 'delivered' | 'returned' | 'disputed';
//   createDate: Date;
//   updateDate: Date;
// }

model ProductToSubCategory {
  A              String
  B              String
  SubCategory    SubCategory @relation(fields: [B], references: [id], onDelete: Cascade)
  rmoura_product Product     @relation(fields: [A], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_ProductToSubCategory_AB_unique")
  @@index([B], map: "_ProductToSubCategory_B_index")
  @@map("_ProductToSubCategory")
}
